name: Build Unity Project for Windows

on:
  release:
    types: [created]

jobs:
  build:
    name: Build for Windows
    runs-on: windows-2022
    
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # Cache Unity Library folder
      - name: Cache Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      # Cache NuGet packages
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: |
            Assets/Packages
            Assets/Packages.meta
          key: NuGet-${{ hashFiles('**/packages.config', '**/NuGet.config') }}
          restore-keys: |
            NuGet-

      # Restore NuGet packages
      - name: Restore NuGet packages
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          allowDirtyBuild: true
          targetPlatform: StandaloneWindows64
          customParameters: -executeMethod NugetForUnity.NugetHelper.Restore

      # Build Unity project
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          allowDirtyBuild: true
          targetPlatform: StandaloneWindows64
          buildName: ${{ github.event.repository.name }}
          buildsPath: build
          buildMethod: UnityBuilderAction.BuildScript.Build

      # Create ZIP archive of the build
      - name: Create ZIP archive
        run: |
          cd build/StandaloneWindows64
          zip -r ../../${{ github.event.repository.name }}-Windows-${{ github.event.release.tag_name }}.zip .

      # Upload ZIP to release
      - name: Upload ZIP to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ github.event.repository.name }}-Windows-${{ github.event.release.tag_name }}.zip
          asset_name: ${{ github.event.repository.name }}-Windows-${{ github.event.release.tag_name }}.zip
          asset_content_type: application/zip
